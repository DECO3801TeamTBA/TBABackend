// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WanderListAPI.Data;

namespace WanderListAPI.Migrations
{
    [DbContext(typeof(WanderListDbContext))]
    [Migration("20200904044502_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "32e5202d-4fc8-44e9-a1fa-59ccd7d1aa18",
                            ConcurrencyStamp = "66f1a9d6-1999-43ce-bfbd-0aa57945cb1f",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "72a9709c-c41d-4ec2-b7b9-dceb716dd395",
                            ConcurrencyStamp = "67b32351-e581-4db2-b767-5b5bc4e59c57",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f964d4de-2239-4891-9895-78f0583a966b",
                            RoleId = "72a9709c-c41d-4ec2-b7b9-dceb716dd395"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WanderListAPI.Models.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            ActivityId = new Guid("6c2ee7b3-5ad3-46ca-939a-26163e38dfd5")
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "f964d4de-2239-4891-9895-78f0583a966b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff3bf1e8-180a-49cd-8ac3-4c80287dfb49",
                            Email = "surfer69@scoobydoo.com",
                            EmailConfirmed = false,
                            FirstName = "Norville",
                            LastName = "Rogers",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPf+HL/rOvx22ytFrTHpozRjBGyUK5ATi0I+ZsQ3PrfoGx/B8cfO4PosiobnQy3Apg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "db0eddda-05fe-49c7-834d-9d6482c2414a",
                            TwoFactorEnabled = false,
                            UserName = "Shaggy"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Lattitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ContentId");

                    b.ToTable("Content");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("6c2ee7b3-5ad3-46ca-939a-26163e38dfd5"),
                            Capacity = 125,
                            Description = "Take a guided tour of the towns most mysterious attractions in a mystery inc truck",
                            Lattitude = 0m,
                            Longitude = 0m,
                            Name = "Ride in the Mystery.inc truck"
                        },
                        new
                        {
                            ContentId = new Guid("162664b0-05e2-45a3-bb6d-4e830a3353b4"),
                            Capacity = 50,
                            Description = "The scooby themed holiday destination",
                            Lattitude = 0m,
                            Longitude = 0m,
                            Name = "Scooby Ville"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Destination", b =>
                {
                    b.Property<Guid>("DestinationId")
                        .HasColumnType("char(36)");

                    b.HasKey("DestinationId");

                    b.ToTable("Destination");

                    b.HasData(
                        new
                        {
                            DestinationId = new Guid("162664b0-05e2-45a3-bb6d-4e830a3353b4")
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.History", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ContentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("History");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("6c2ee7b3-5ad3-46ca-939a-26163e38dfd5"),
                            UserId = "f964d4de-2239-4891-9895-78f0583a966b",
                            Date = new DateTime(2020, 9, 4, 14, 45, 1, 272, DateTimeKind.Local).AddTicks(6792)
                        },
                        new
                        {
                            ContentId = new Guid("162664b0-05e2-45a3-bb6d-4e830a3353b4"),
                            UserId = "f964d4de-2239-4891-9895-78f0583a966b",
                            Date = new DateTime(2020, 9, 4, 14, 45, 1, 274, DateTimeKind.Local).AddTicks(5989)
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Resource", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("longblob");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("WanderListAPI.Models.ResourceMeta", b =>
                {
                    b.Property<Guid>("ResourceMetaId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("OnDisk")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResourceMetaId");

                    b.HasIndex("ContentId");

                    b.ToTable("ResourceMeta");
                });

            modelBuilder.Entity("WanderListAPI.Models.Reward", b =>
                {
                    b.Property<Guid>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RewardId");

                    b.ToTable("Reward");

                    b.HasData(
                        new
                        {
                            RewardId = new Guid("2846fb56-080e-4710-a33c-7973615556c5"),
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burger King Coupon",
                            Value = "15% OFF"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Shortlist", b =>
                {
                    b.Property<Guid>("ShortlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ListName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ShortlistId");

                    b.HasIndex("UserId");

                    b.ToTable("Shortlist");

                    b.HasData(
                        new
                        {
                            ShortlistId = new Guid("0e0c4491-0bd5-4aed-a7d4-f94d0d477be3"),
                            ListName = "Scooby Doo Vacation",
                            UserId = "f964d4de-2239-4891-9895-78f0583a966b"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.ShortlistContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShortlistId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "ShortlistId");

                    b.HasIndex("ShortlistId");

                    b.ToTable("ShortlistContent");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("6c2ee7b3-5ad3-46ca-939a-26163e38dfd5"),
                            ShortlistId = new Guid("0e0c4491-0bd5-4aed-a7d4-f94d0d477be3"),
                            Number = 0
                        },
                        new
                        {
                            ContentId = new Guid("162664b0-05e2-45a3-bb6d-4e830a3353b4"),
                            ShortlistId = new Guid("0e0c4491-0bd5-4aed-a7d4-f94d0d477be3"),
                            Number = 0
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.UserReward", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RewardId");

                    b.ToTable("UserReward");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2846fb56-080e-4710-a33c-7973615556c5"),
                            RewardId = new Guid("f964d4de-2239-4891-9895-78f0583a966b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.Activity", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.Destination", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.History", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany("Histories")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderListAPI.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.ResourceMeta", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", null)
                        .WithMany("ResourceMetas")
                        .HasForeignKey("ContentId");

                    b.HasOne("WanderListAPI.Models.Resource", "Resource")
                        .WithOne("ResourceMeta")
                        .HasForeignKey("WanderListAPI.Models.ResourceMeta", "ResourceMetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.Shortlist", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WanderListAPI.Models.ShortlistContent", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderListAPI.Models.Shortlist", "Shortlist")
                        .WithMany()
                        .HasForeignKey("ShortlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
