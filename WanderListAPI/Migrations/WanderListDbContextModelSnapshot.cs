// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WanderListAPI.Data;

namespace WanderListAPI.Migrations
{
    [DbContext(typeof(WanderListDbContext))]
    partial class WanderListDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "9df462ce-9abf-416f-bc98-27328d8d11f0",
                            ConcurrencyStamp = "5b192353-f878-4a7d-be44-6384fd500a17",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "6906aacd-cc11-4a78-a0a0-5e2e884fd78b",
                            ConcurrencyStamp = "d913a93d-fb11-4edf-ad51-81cba69526cd",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "fdcbc55e-7752-4df1-aaff-d8540221995d",
                            RoleId = "9df462ce-9abf-416f-bc98-27328d8d11f0"
                        },
                        new
                        {
                            UserId = "9e383f17-4356-4e5f-a0b9-84e08eb1ca5d",
                            RoleId = "6906aacd-cc11-4a78-a0a0-5e2e884fd78b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WanderListAPI.Models.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .HasColumnType("char(36)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");

                    b.HasData(
                        new
                        {
                            ActivityId = new Guid("2bb50d1a-00d5-4b52-8575-a6c9015b0180")
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "fdcbc55e-7752-4df1-aaff-d8540221995d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ebe985e-2eae-4d9d-82f0-227f7c3c3cf2",
                            Email = "fake@fake.com",
                            EmailConfirmed = false,
                            FirstName = "JoeyJojo",
                            LastName = "Shabadoo",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN4sP5JeSPQ6ji1hv1oXonc+SqzHQXCU1wfVgqYof+y9G6rg2LnsRCNlfZSM22LJkg==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "2d2ce6ac-cde8-4d10-a5e9-e22742ccdb9f",
                            TwoFactorEnabled = false,
                            UserName = "wanderuser"
                        },
                        new
                        {
                            Id = "9e383f17-4356-4e5f-a0b9-84e08eb1ca5d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "252bd55e-4195-4f53-ae87-c53017cde406",
                            Email = "surfer69@scoobydoo.com",
                            EmailConfirmed = false,
                            FirstName = "Norville",
                            LastName = "Rogers",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKZ80I3MkvhpytJXTPLAt8IIDwtxGgoOXbaIgk+Int9p+AB5j129JhNGCZYMKYmveA==",
                            PhoneNumberConfirmed = false,
                            Points = 0,
                            SecurityStamp = "a1a6b919-acb3-4bbb-ab34-ecc1bfef5126",
                            TwoFactorEnabled = false,
                            UserName = "Shaggy"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Lattitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ContentId");

                    b.ToTable("Content");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("6dddafa9-b15e-42b4-bcfb-2fbbe5411d8a"),
                            Address = "fake",
                            Capacity = 200,
                            Description = "fake",
                            Lattitude = 15.51m,
                            Longitude = 45.15m,
                            Name = "Fakorama",
                            Website = "www.fake.com"
                        },
                        new
                        {
                            ContentId = new Guid("2bb50d1a-00d5-4b52-8575-a6c9015b0180"),
                            Capacity = 0,
                            Lattitude = 0m,
                            Longitude = 0m
                        },
                        new
                        {
                            ContentId = new Guid("04b3d79b-6edf-4524-a269-3d53a5bf0daa"),
                            Capacity = 0,
                            Lattitude = 0m,
                            Longitude = 0m
                        },
                        new
                        {
                            ContentId = new Guid("f0a1a865-9636-4e49-92fa-45108b39ccdf"),
                            Capacity = 0,
                            Lattitude = 0m,
                            Longitude = 0m
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Destination", b =>
                {
                    b.Property<Guid>("DestinationId")
                        .HasColumnType("char(36)");

                    b.HasKey("DestinationId");

                    b.ToTable("Destination");

                    b.HasData(
                        new
                        {
                            DestinationId = new Guid("04b3d79b-6edf-4524-a269-3d53a5bf0daa")
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.History", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ContentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("History");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("6dddafa9-b15e-42b4-bcfb-2fbbe5411d8a"),
                            UserId = "fdcbc55e-7752-4df1-aaff-d8540221995d",
                            Date = new DateTime(2020, 9, 3, 18, 8, 46, 661, DateTimeKind.Local).AddTicks(3795)
                        },
                        new
                        {
                            ContentId = new Guid("2bb50d1a-00d5-4b52-8575-a6c9015b0180"),
                            UserId = "fdcbc55e-7752-4df1-aaff-d8540221995d",
                            Date = new DateTime(2020, 9, 3, 18, 8, 46, 665, DateTimeKind.Local).AddTicks(2856)
                        },
                        new
                        {
                            ContentId = new Guid("04b3d79b-6edf-4524-a269-3d53a5bf0daa"),
                            UserId = "fdcbc55e-7752-4df1-aaff-d8540221995d",
                            Date = new DateTime(2020, 9, 3, 18, 8, 46, 665, DateTimeKind.Local).AddTicks(2969)
                        },
                        new
                        {
                            ContentId = new Guid("f0a1a865-9636-4e49-92fa-45108b39ccdf"),
                            UserId = "fdcbc55e-7752-4df1-aaff-d8540221995d",
                            Date = new DateTime(2020, 9, 3, 18, 8, 46, 665, DateTimeKind.Local).AddTicks(2993)
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Resource", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("longblob");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("WanderListAPI.Models.ResourceMeta", b =>
                {
                    b.Property<Guid>("ResourceMetaId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("OnDisk")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ResourceMetaId");

                    b.HasIndex("ContentId");

                    b.ToTable("ResourceMeta");
                });

            modelBuilder.Entity("WanderListAPI.Models.Reward", b =>
                {
                    b.Property<Guid>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("RewardId");

                    b.ToTable("Reward");

                    b.HasData(
                        new
                        {
                            RewardId = new Guid("41e43295-8ba2-4c71-b909-ade5b96448d4"),
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Burger King Coupon",
                            Value = "15% OFF"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.Shortlist", b =>
                {
                    b.Property<Guid>("ShortlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ListName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ShortlistId");

                    b.HasIndex("UserId");

                    b.ToTable("Shortlist");

                    b.HasData(
                        new
                        {
                            ShortlistId = new Guid("40a93fb8-2bc1-45be-b1f7-45be929ee473"),
                            ListName = "Scooby Doo Vacation",
                            UserId = "9e383f17-4356-4e5f-a0b9-84e08eb1ca5d"
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.ShortlistContent", b =>
                {
                    b.Property<Guid>("ContentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ShortlistId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ContentId", "ShortlistId");

                    b.HasIndex("ShortlistId");

                    b.ToTable("ShortlistContent");

                    b.HasData(
                        new
                        {
                            ContentId = new Guid("2bb50d1a-00d5-4b52-8575-a6c9015b0180"),
                            ShortlistId = new Guid("40a93fb8-2bc1-45be-b1f7-45be929ee473"),
                            Number = 1
                        },
                        new
                        {
                            ContentId = new Guid("04b3d79b-6edf-4524-a269-3d53a5bf0daa"),
                            ShortlistId = new Guid("40a93fb8-2bc1-45be-b1f7-45be929ee473"),
                            Number = 1
                        },
                        new
                        {
                            ContentId = new Guid("f0a1a865-9636-4e49-92fa-45108b39ccdf"),
                            ShortlistId = new Guid("40a93fb8-2bc1-45be-b1f7-45be929ee473"),
                            Number = 1
                        });
                });

            modelBuilder.Entity("WanderListAPI.Models.UserReward", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RewardId");

                    b.ToTable("UserReward");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("41e43295-8ba2-4c71-b909-ade5b96448d4"),
                            RewardId = new Guid("fdcbc55e-7752-4df1-aaff-d8540221995d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.Activity", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.Destination", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.History", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany("Histories")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderListAPI.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.ResourceMeta", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", null)
                        .WithMany("ResourceMetas")
                        .HasForeignKey("ContentId");

                    b.HasOne("WanderListAPI.Models.Resource", "Resource")
                        .WithOne("ResourceMeta")
                        .HasForeignKey("WanderListAPI.Models.ResourceMeta", "ResourceMetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WanderListAPI.Models.Shortlist", b =>
                {
                    b.HasOne("WanderListAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WanderListAPI.Models.ShortlistContent", b =>
                {
                    b.HasOne("WanderListAPI.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WanderListAPI.Models.Shortlist", "Shortlist")
                        .WithMany()
                        .HasForeignKey("ShortlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
